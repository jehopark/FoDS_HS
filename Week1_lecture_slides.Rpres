[Foundations of Data Science for High School]
Foundations of Data Science for High School
========================================================
author: Dr. Jeho Park
date: November 12, 2021
autosize: true

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = FALSE)
```

Introduction: Instructor
========================================================
__About Me__

Email: dr.jeho.park@gmail.com  

- Studied Electrical Engineering in college and Computer Science + Applied Mathematics (Statistics) in grad school
- Focused on statistical modeling on parallel processing performance
- Associate Director of Harvey Mudd College’s Scientific Computing and Research Computing, promoting CS and data analytics to non-CS people
- Director of Claremont McKenna College's Quantitative and Computing Lab, a comprehensive support center for math, computing and data analytics
- Director and Visiting Assistant Professor for Data Science Capstone Program

Introduction: TA
========================================================
__About TA__

Kenneth Park  

Sam Lee


Course Goals
========================================================

__Students will understand data science and appreciate the importance of data analytics and visualization.__

Course Schedule
========================================================
See the [Course Syllabus](https://docs.google.com/document/d/1Xj1K14juLeDEwbTkoOD5zFzq9M-eoaZ8/edit?usp=sharing&ouid=103067041144506061546&rtpof=true&sd=true)

Expectations
========================================================
1. __Participation is the key__  
    *Show your attention (open camera, use gestures, chat, voice, etc.).*
    
1. __Do all the hands-on examples__  
    *No exception!*

1. __During the first 2 weeks, you will need to find a data project for your final presentation__  
    *Instructor and TA will help you on this*

1. __Our main communication language is English__  
    *You can selectively use Korean (as I can understand Korean well)*

Course Technologies
===================
- Canvas (homework and discussion)
  - https://canvas.instructure.com/enroll/33AL47
- GitHub (course materials)  
  - https://jehopark.github.io/FoDS_HS/ (course web page)
- DSA-CS Website (announcement)
  - https://blog.naver.com/PostList.naver?blogId=dsacs_winter2019&from=postList&categoryNo=47


Text Book
========================================================
[Main Text] __R for Data Science by Hadley Wickham and Garrett Grolemund__

- https://r4ds.had.co.nz/ (English Version)

- https://sulgik.github.io/r4ds/ (Korean Version) 

[Reference] 

1. __Foundations of Data Science by Mark Huber__  
  https://www.markhuberdatascience.org/data-science-text
   
2. __Hands-On Programming with R by Garrett Grolemund__  
  https://rstudio-education.github.io/hopr/

Introduction to Data Science
========================================================
__Today's Goals__

(1) Make sure everyone sets the RStudio environment   
(2) Get familiar with RStudio environment  
(3) Create a first R markdown file  
(4) Solve exercise problems and add solutions to a markdown (Practice session)  

What is Data Science?  
=============
Data science is the interdisciplinary study of the tools and methods that are developed and used to extract meaningful insights from data.

<br><div align="center">
  <img src="images/data-science-vanndiagram.png" width=600>
</div>

Image source: https://towardsdatascience.com/introduction-to-statistics-e9d72d818745

Typical Data Science Project Workflow
===================
<br><div align="center">
  <img src="images/data-science.png" width=900>
</div>

Typical Data Science Tools
===================
- Pencil and paper
- Computer programming software 
  - Programming: R
  - Programming: Python
  - Database: SQL
  - Statistical applications: SPSS, STATA, SAS, MATLAB, etc.


What is R?
========================================================
* R is a statistical programming language and environment.
* R is open source/free.
* R is widely used.
* R is cross-platform.
* R is hard to learn (?)

What is not R?
========================================================
* S: R's ancestor
* S-Plus: Commercial; modern implementation of S
* SAS: Commercial; widely used in the commercial analytics.
* SPSS: Commercial; easy to use; widely used in Social Science.
* MATLAB: Commercial; can do some Stats. 
* Python: Also can do some Stats; good in deep learning

Whic is better for Data Science? R or Python?
=============
R is Useful and easier to do __Statistical Modeling and Visualization__

---------

Python has a great collection of libraries to do __Machine learning and Deep Learning__

R Packages
========================================================
- R is known for its community and its huge collection of user-generated packages
- Packages are collections of R functions, data, and compiled code in a well-defined format. The directory where packages are stored is called the library.
- We will install the `tidyverse` package, a collection of R packages for data science

```{r eval=FALSE}
install.packages('tidyverse') # you can also use RStudio's Packages tab

# You should load dplyr package first to use any functions and datasets in the package
library(tidyverse) 
```

What is RStudio?
========================================================
* Integrated Development Environment for R
* Nice combination of GUI and CLI
* Free and commercial version
* 4 main windows, tabs, etc
* Version control: Git and VPN
* Debugging 
* Documentation: R Markdown
  - install.packages("rmarkdown")
  - http://rmarkdown.rstudio.com/
* Presentation slides: R Presentation (this one!)


How to Get Help
========================================================
* Stack Overflow: http://stackoverflow.com/questions/tagged/r
* Cross-Validated: the statistics Q&A site http://stats.stackexchange.com/
* Google


[Homework] Where to get help?
=============
- Find Korean websites/community that you can ask questions about R programming.

[Hands-On] First R Project 
========================

- Create a new project named "FoDS_HS"

- Login to RStudio Cloud and follow my instructions



R's Arithmetic Operators
========================
That's right! R is a programming languge.
```{r, eval=FALSE}
a <- 16 # assignment operator! Is it an arrow sign?
b <- 3
add <- a + b
sub <- a - b
mult <- a * b
div <- a / b
int_div <- a %/% b
exponent <- a ^ b
modulus <- a %% b
```

```{r}
# a comment is preceded by a hash sign
```

Documentation: R Markdown 
========================
__R Markdown is our main documentation tool__

"R Markdown provides **an unified authoring framework** for data science, combining your code, its results, and your prose commentary. R Markdown documents are fully reproducible and support dozens of output formats, like PDFs, Word files, slideshows, and more."

- Basic Formatting
  - Global options
  - Text formats
- R Code Chunks
  - Code chunk options
- R Markdown cheat sheet and quick reference
  - https://rmarkdown.rstudio.com/lesson-15.HTML


[Hands-On] Now it's your turn
========================================================

Let's create a R Notebook and start the hands-on exercise in the Notebook document.

* Click on _File > New File > R Notebook_
* Save it as _FoDS_HS_
* And follow my instructions

Exercise 1:

Create a variable x containing pi times pi, and another variable y containing a square root of x. Show the values as an output.

두개의 새로운 변수 x 와 y 를 만들어보자.   
x는 pi 곱하기 pi의 값을 y는 x의 제곱근 값을 가지도록 값을 저장하고 두 변수의 값을 output으로 보여보자.

[Hands-On] R Markdown Text Formatting
========================
__R Markdown__ 

Let's go over __Section 27.3__ Text Formatting.

- Copy and paste Section 27.3 code snippet into your Rmd file

Session 2
===========================
# Visualization


Visualization with ggplot2: tidyverse package
======================
* Load tidyverse package in your environment
```{r}
# if you don't have the package installed yet
# install.package("tidyverse")
library(tidyverse)
```
>> This should load several packages. See the R message on the console. Notice the "Conflicts" -- what does this mean?

mpg dataset
==================
```{r}
?mpg
```

<div align="center">
  <img src="images/mpg.png" width=800>
</div>



Visualization with ggplot2: a quick look
======================
```{r}
# library(ggplot2)
ggplot(data = mpg) + 
  aes(x = displ, y = hwy, color = class) + 
  geom_point() 
```

```{r}
# Compare ggplot() with plot() from base package
base::plot(mpg$displ, mpg$hwy)
```

>> Let's look at a grammar of graphics


Visualization with ggplot2: A Grammar of Graphics
=======================

>> A grammar of graphics is a set of tools for building graphics by adding components and transformations __layer by layer__.  

--

>> Every ggplot2 plot has three key components:
>> - __Data__,
>> - A set of __aesthetic mappings__ between variables in the data and visual properties, and
>> - At least one __layer__ which describes how to render each observation. Layers are usually created with a `geom` function.

```{r}
library(ggplot2)
ggplot(data = mpg) + # data
  aes(x = displ, y = hwy) + # aesthetic mapping
  geom_point() # layer (geometric object)
```

Visualization with ggplot2: Aesthetic Mapping
=======================
Maps data into graphic components: x, y, color, shape, etc.


Visualization with ggplot2: A Grammar of Graphics
=======================
Most points on the plot form a nice linear relationship while there are some points that don't seem to follow the relationship. What types of cars are they? 

```{r}
ggplot(data = mpg) +  
  geom_point(mapping = aes(x = displ, y = hwy, color = class)) # create 
```

```{r}
# Color does not always work for everyone. How about different shapes?
ggplot(data = mpg) +  
  geom_point(mapping = aes(x = displ, y = hwy, shape = class)) # Any issue with the shape option?
```

Geometric Objects (geom)
=======================
A __geom__ is the geometrical object that a plot uses to represent data. 

For example:  
- bar charts = bar geoms
- line charts = line geoms
- boxplots = boxplot geoms
- scatter plot = point geoms

>> There are over 40 geoms in ggplot2 package.

Geometric Objects (geom): Where to put aesthetic mapping?
=======================
```{r}
# Using point geom
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```

```{r}
# Using smooth geom
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

```{r}
# We can display multiple geoms in one plot
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

Geometric Objects (geom): Where to put aesthetic mapping?
=======================
```{r}
# Using multiple geoms
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth() 
  
```

```{r}
ggplot(data = mpg) + 
  aes(x = displ, y = hwy) + 
  geom_point() + # Add mapping = aes(color = class) and see the difference
  geom_smooth() 
  
```

Mapping Scope: Global and Local
==========================
Global mapping: the mappings of variables are done when the `ggplot()` is called  

Local mapping: the mappings of variables are done when the geom layer is called

>> Local mapping in a layer overrides the global mapping for that layer.

```{r}
# library(dplyr) # to use `filter` function below

ggplot(data = mpg) + 
  aes(x = displ, y = hwy) + 
  geom_point(mapping = aes(color = class)) + # use the global mapping
  geom_smooth(data = filter(mpg, class == "subcompact"), se = TRUE) 
  
```

Grammar of Graphics
=====================
Defines a plot as the combination of

1. __Data__
2. __Aesthetic Mapping__ (대응)
3. __Geometric Object (representation)__
4. (Statistical Transformation)
5. Position Adjustment

Position Adjustments (demo)
================
To add clarification or to show additional information on one plot, we can use position adjustment methods in ggplot2.

(1) To avoid overlapping of points:

```{r}
ggplot(data = mpg) + 
  aes(x = displ, y = hwy) + 
#  geom_point()
  geom_point(position = "jitter")
```

Position Adjustments (demo) 2
================
(2) To show additional information through visual representation

- Barcharts
  - Simple barcharts
  - Colored barcharts
  - Stacked barcharts
  - Side-by-side barcharts

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = cut))
```

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity))
```

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
```

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
```


[LAB1] Day 1 Practice
==================
- 3.2.4: #4
- 3.3.1: #3, #4, #5, #6
- 3.6.1: #5

Further Study
=================
## Variable Types


Variable Types
===================
![Variable Types](./images/variable-types.png)

Source: https://statsandr.com/blog/variable-types-and-examples/

What is a discrete variable?
===================

>> Quantitative *discrete* variables are numeric variables for which the values it can take are __countable__ and have a __finite number of possibilities__. The values are usually, but not always, integers. For example:

>> - Number of children per family
>> - Number of students in a class
>> - Number of citizens of a country

Then, what is a continuous variable?
===================
>> Quantitative *continuous* variables are numerical measurements whose values are __not countable__ and have an __infinite number of possibilities__. For example:

>> - Age
>> - Weight
>> - Height

Q: Classify the following variables as continuous or discrete:
===============================================
(1) Temperature in Seoul  

(2) The number of sales made in a week  

(3) Time taken to run a 100-meter dash   

(4) The quantity of fat in samgyupsal  










